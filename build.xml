<?xml version="1.0" encoding="UTF-8"?>

<!-- This DOCTYPE tag shuts off the warning from Eclipse that there is no DTD
     associated with this XML file. -->

<!DOCTYPE project>

<project name="wallpaper-switcher" default="dependent-jar" basedir=".">

    <property name="app.formal.name" value="Wallpaper Switcher"/>
    <property name="main.class" value="com.alteredmechanism.wallpaperswitcher.WallpaperSwitcher"/>
    <property name="vendor" value="Altered Mechanism"/>
    <property name="targeted.github.release" value="4.0.0"/> <!-- Sync with next github release -->
    <property name="compile.target.version" value="1.6"/> <!-- JNA requires Java 6 -->
    <property name="src.dir" value="src/main/java"/>
    <property name="lib.dir" value="lib"/>
    <property name="one-jar.jar" value="${lib.dir}/one-jar-ant-task-0.97.jar"/>
   	<property name="java.compiler" value="${java.home}/../bin/javac" />
    <property name="build.dir" value="build"/>
    <property name="cls.dir" value="${build.dir}/classes"/>
    <property name="libs.dir" value="${build.dir}/libs"/>
    <property name="run.script.dir" value="src/periphery/scripts"/>
    <property name="run.script" value="${run.script.dir}/${ant.project.name}.bat"/>
    <property name="sys.install.dir" value="C:\Program Files\Wallpaper Switcher"/>
    <property name="bld.dist.dir" value="${build.dir}/distribution"/>
    <property name="user.install.dir" value="${user.home}/opt/${ant.project.name}"/>

    <!-- Might need a better location, but the file name is corrected from the Ant default.

         The below task "buildnumber" automatically populates the property:
         build.number
         using the "build.number.file" defined here.
         -->
    <property name="build.number.file" value="src/build-number.txt"/>

    <!-- The following naming proposal should only affect executable jars, not
         regular library jars. It is to differentiate between a self-contained
         executable jar and an executable jar that still has its dependencies
         outside itself. A jar without a ~something appended to the name can
         be assumed to be a library jar that is not executable and has
         no dependencies included, like those uploaded to Maven Central.
         -->

    <!-- The tilde is necessary so you can tell that the following word is not
         part of the application name. Dashes separate words in the application
         name. So those cannot be used. It is the best separator. A dot would
         indicate a file type, which it is not. It is just an adjective. Other
         symbols either look terrible or are not allowed in UN*X or Windows
         file names.

         Nonautonomous jar name possibilities:
             wallpaper-switcher~nonautonomous.jar   - way too long and hard to pronounce
             wallpaper-switcher~dependent.jar       - because it has dependencies
             wallpaper-switcher~isolated.jar        - isolated from its dependencies
             wallpaper-switcher~slim.jar            - opposite of fat
             wallpaper-switcher~simple.jar          - opposite of uber, kind of
             -->
    <property name="dep-jar" value="${libs.dir}/${ant.project.name}~dependent.jar"/>

    <!-- A better description than "uber", or "fat" or "executable" would be
         self-contained. But it is very long. Also, "autonomous" would be good,
         except that it is long:
             wallpaper-switcher~autonomous.jar      - best captures function and data
             wallpaper-switcher~self-contained.jar  - doesn't describe exec
             wallpaper-switcher~uber.jar            - doesn't describe exec or autonomous
             wallpaper-switcher~fat.jar             - doesn't describe exec or autonomous
             wallpaper-switcher~exe.jar             - same as exec below
             wallpaper-switcher~exec.jar            - good but misses autonomous meaning
                                                      because exec jar could have dependent
                                                      jars outside itself
             -->
    <property name="uber.jar" value="${libs.dir}/${ant.project.name}~uber.jar"/>

    <!-- It is better to put the taskdef directly here instead of using the
         include file as the documentation suggests. The include file is
         contained inside the jar file. So, then it is necessary to extract
         the jar file to get to the include file. So now you need both the
         extracted include file and the jar file, or the extracted jar
         contents.
         This gets messy. Just keep the jar file jarred and use the taskdef
         here. Intellij is then able to file the classname at least, which
         it couldn't do with everything extracted. But, it still can't
         recognize the one-jar task...doh!
         -->
    <taskdef name="one-jar" classname="com.simontuffs.onejar.ant.OneJarTask"
             classpath="${one-jar.jar}" onerror="report"/>

    <condition property="java.version.is.too.high">
        <and>
            <not>
                <isset property="ignore.java.version"/>
            </not>
            <javaversion atleast="9"/>
        </and>
    </condition>

    <fileset id="dependency.jar.set" dir="${lib.dir}">
        <include name="gson-2.4.jar"/>
        <include name="jna-4.0.0.jar"/>
        <include name="jna-platform-4.0.0.jar"/>
    </fileset>

    <path id="dependency.jars">
        <fileset refid="dependency.jar.set"/>
    </path>

    <target name="verify-java-version"
            description="Java version has to be between 6 and 8"
            if="java.version.is.too.high">
        <fail>Java version is too high

            Ant is running on Java version ${java.specification.version}. Please set JAVA_HOME
            to Java 1.8 or less, because that was the last version
            to compile code for Java 1.6. JNA requires version 1.6.

            Alternatively, define the property ignore.java.version:

                ant -Dignore.java.version=true jar

            But, this will force your users to have at least your
            version. It will cause failures for those who don't
            want to, or can't upgrade. Java hatred will increase
            in the world, and it will be your fault.
        </fail>
    </target>

    <target name="setup" depends="verify-java-version" description="Sets stuff up">
        <mkdir dir="${cls.dir}"/>
        <mkdir dir="${libs.dir}"/>
        <buildnumber file="${build.number.file}"/> <!-- Create or increment build.number. -->
    </target>

    <target name="compile-with-runtime-version" if="ignore.java.version"
            description="Compiles with the version of the runtime JDK">
        <!-- Needed for manifest property -->
        <property name="compile.target.version" value="${java.specification.version}"/>
        <javac srcdir="${src.dir}" destdir="${cls.dir}"
               debug="on" includeAntRuntime="false">
            <classpath refid="dependency.jars"/>
        </javac>
    </target>

    <target name="compile-with-specified-version" unless="ignore.java.version"
            description="Compiles for the Java version specified in 'lang.version'">
        <javac srcdir="${src.dir}" destdir="${cls.dir}"
               debug="on"
               source="${compile.target.version}" target="${compile.target.version}"
               includeAntRuntime="false">
            <classpath refid="dependency.jars"/>
        </javac>
    </target>

    <target name="compile"
            depends="setup,compile-with-runtime-version,compile-with-specified-version"
            description="Compiles the source">
    </target>

    <target name="dependent-jar" depends="compile" description="Builds an executable jar file">
        <manifestclasspath property="jar.runtime.classpath" jarfile="${dep-jar}">
            <classpath refid="dependency.jars"/>
        </manifestclasspath>
        <jar destfile="${dep-jar}">
            <manifest>
                <attribute name="Specification-Title" value="${app.formal.name}"/>
                <attribute name="Specification-Version" value="${targeted.github.release}"/>
                <attribute name="Specification-Vendor" value="${vendor}"/>
                <attribute name="Implementation-Title" value="${ant.project.name}"/>
                <attribute name="Implementation-Version" value="build.${build.number}"/>
                <attribute name="Implementation-Vendor" value="${vendor}"/>
                <attribute name="Main-Class" value="${main.class}"/>
                <attribute name="Class-Path" value="${jar.runtime.classpath}"/>
                <attribute name="Build-Java-Runtime-Name" value="${java.runtime.name}"/>
                <attribute name="Build-Java-Runtime-Version" value="${java.runtime.version}"/>
                <attribute name="Build-Java-Vendor" value="${java.vendor}"/>
                <attribute name="Compile-Target-Version" value="${compile.target.version}"/>
            </manifest>
            <fileset dir="${cls.dir}"/>
        </jar>
    </target>

    <target name="uber-jar" depends="compile"
            description="Builds an executable/fat/uber jar file">
        <one-jar destfile="${uber.jar}">
            <manifest>
                <attribute name="Specification-Title" value="${app.formal.name}"/>
                <attribute name="Specification-Version" value="${targeted.github.release}"/>
                <attribute name="Specification-Vendor" value="${vendor}"/>
                <attribute name="Implementation-Title" value="${ant.project.name}"/>
                <attribute name="Implementation-Version" value="build.${build.number}"/>
                <attribute name="Implementation-Vendor" value="${vendor}"/>
                <attribute name="One-Jar-Main-Class" value="${main.class}"/>
                <attribute name="Build-Java-Runtime-Name" value="${java.runtime.name}"/>
                <attribute name="Build-Java-Runtime-Version" value="${java.runtime.version}"/>
                <attribute name="Build-Java-Vendor" value="${java.vendor}"/>
                <attribute name="Compile-Target-Version" value="${compile.target.version}"/>
            </manifest>
            <main>
                <fileset dir="${cls.dir}"/>
            </main>
            <lib>
                <fileset refid="dependency.jar.set"/>
            </lib>
        </one-jar>
    </target>

    <target name="jars" depends="dependent-jar,uber-jar"
            description="Builds all jars"/>

    <target name="user-install" depends="jars"
            description="Installs into $HOME/bin and $HOME/lib">
        <mkdir dir="${user.home}/bin"/>
	    <copy file="${run.script}" todir="${user.home}/bin"
	          preservelastmodified="true"/>
        <chmod file="${user.home}/bin/${ant.project.name}" perm="ugo+rx"/>
        <mkdir dir="${user.home}/lib"/>
	    <copy file="${uber.jar}" todir="${user.home}/lib"
              preservelastmodified="true"/>
        <exec dir="${user.home}/bin" executable="cmd.exe" osfamily="windows">
            <arg line="bin/addtopath.bat"/>
        </exec>
    </target>

    <target name="system-install" depends="jars" description="Installs into /usr/local/bin and /usr/local/lib">
        <mkdir dir="${sys.install.dir}/bin"/>
        <copy file="${run.script}" todir="${sys.install.dir}/bin" preservelastmodified="true"/>
        <chmod file="${sys.install.dir}/bin/${ant.project.name}" perm="ugo+rx"/>
        <mkdir dir="${sys.install.dir}/lib"/>
        <copy file="${dep-jar}" todir="${sys.install.dir}/lib" preservelastmodified="true"/>
    </target>

    <target name="dist-zip" depends="uber-jar" description="Build a zip file with just binaries for distribution to users">
        <mkdir dir="${bld.dist.dir}"/>
        <mkdir dir="${bld.dist.dir}/bin"/>
        <mkdir dir="${bld.dist.dir}/lib"/>
        <copy file="${run.script}" todir="${bld.dist.dir}/bin"/>
        <copy file="src/periphery/javascript/libexec/http-get.js" todir="${bld.dist.dir}/bin"/>
        <copy file="${uber.jar}" todir="${bld.dist.dir}/lib"/>
        <zip destfile="${build.dir}/libs/${ant.project.name}-${targeted.github.release}-bin.zip">
            <fileset dir="${bld.dist.dir}" includes="**/*"/>
        </zip>
    </target>

    <target name="run" depends="dependent-jar" description="Run Jar file">
        <java jar="${dep-jar}" fork="true"/>
    </target>

    <target name="wine" depends="dependent-jar,uber-jar" description="Run Jar file with Wine">
        <!-- Don't call the batch file. It is a user-facing script. It is
             not necessary to find the jar, or java, or download java.
             Those are user conveniences. The jar that was just built is
             the one that needs tested. Don't call to a batch file that
             might choose a different jar. Create minimal batch file with
             a pause command to make sure the output can be read before
             the window disappears.
             -->
        <echo file="${build.dir}/debug.bat">@echo off
            java -jar ${uber.jar}
            pause
        </echo>
        <!-- This may require "winetricks cmd" to be installed for the
             /c switch to work. And then it gets installed in
             C:\windows\syswow64 which may not be first in the path and
             the default cmd may not work. So check that if this fails.
             OMG, Wine is hard to get to work.

             The 32-bit Java 8 works in Wine. The latest 64-bit version
             did not work. It exited with an internal error.
             -->
        <exec executable="wineconsole">
            <arg value="cmd"/>
            <arg value="/c"/>
            <arg value="${build.dir}\debug.bat"/>
        </exec>
    </target>

    <target name="wine-debug" depends="dependent-jar" description="Debug Jar file with Wine">
        <exec executable="wineconsole" spawn="true">
            <arg value="jdb"/>
            <arg value="-classpath"/>
            <arg value="${dep-jar}"/>
            <arg value="-sourcepath"/>
            <arg value="${src.dir}"/>
        </exec>
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

</project>
